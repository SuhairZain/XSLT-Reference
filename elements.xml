<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE docset [
	
	<!ENTITY template-content '
		<element ref="if" />
		<element ref="choose" />
		<element ref="for-each" />
		<element ref="value-of" />
		<element ref="comment" />
		<element ref="text" />
		<element ref="param" />
		<element ref="variable" />
		<element ref="number" />
	'>

	<!ENTITY root-content '
		<element ref="import" />
		<element ref="include" />
		<element ref="key" />
		<element ref="attribute-set" />
		<element ref="output" />
	'>
]>
<docset name="XSLT 1.0">
	
	<!-- Attributes for later reference -->
	<attribute name="match" content="pattern" />
	<attribute name="name" content="string" />
	<attribute name="mode" content="string" />
	<attribute name="select" content="expression" />
	<attribute name="test" content="condition" />
	<attribute name="disable-output-escaping" content="boolean" />

	<!-- Elements for later reference -->
	<element name="stylesheet">
		<attribute name="version" content="enum" values="1.0" />
		
		&root-content;
		
	</element>

	<element name="transform">
		<description>
			<p>This is an alias for the <ref>stylesheet</ref> element - almost never used.</p>
		</description>
		<attribute name="version" content="number" />
		
		&root-content;
		
	</element>

	<element name="template">
		<attribute ref="match" />
		<attribute ref="name" />
		<attribute ref="mode" />
		<attribute name="priority" content="number" />

		&template-content;
		
	</element>

	<!-- Output elements -->
	<element name="value-of">
		<attribute ref="select" />
		<attribute ref="disable-output-escaping" />
	</element>
	
	<element name="text">
		<attribute ref="disable-output-escaping" />
	</element>
	
	<element name="comment">
		<description>
			<p>Use this to generate a comment in the output.</p>
		</description>
	</element>
	
	<element name="attribute">
		<attribute ref="name" />
		<attribute name="namespace" content="URI" />
		&template-content;
	</element>
	
	<element name="element">
		<attribute ref="name" />
		<attribute name="namespace" content="URI" />
		&template-content;
	</element>
	
	<element name="processing-instruction">
		<attribute ref="name" />
	</element>
	
	<element name="number">
		<attribute name="count" content="expression" />
		<attribute name="level" content="enum" values="single|multiple|any" />
		<attribute name="from" content="expression" />
		<attribute name="value" content="expression" />
		<attribute name="format" content="string" />
		<attribute name="lang" content="string" />
		<attribute name="letter-value" content="enum" values="alphabetic|traditional" />
		<attribute name="grouping-separator" content="character" />
		<attribute name="grouping-size" content="number" />
	</element>
	
	<!-- Program flow elements -->
	<element name="apply-templates">
		<description>
			<p>
				Collects the nodes specified by the <var>select</var> attribute and
				starts processing them using the matching templates.
			</p>
			<p>
				Using the <var>mode</var> attribute restricts the applied templates to
				only those with an identical mode attribute.
			</p>
		</description>
		<attribute ref="select" />
		<attribute ref="mode" />
		
		<element ref="sort" />
		<element ref="with-param" />
	</element>

	<element name="call-template">
		<attribute ref="name" />
		<element ref="with-param" />
	</element>

	<element name="with-param">
		<attribute ref="name" />
		<attribute ref="select" />
	</element>
	
	<element name="for-each">
		<attribute ref="select" />
		<element ref="sort" />
		
		&template-content;
		
	</element>
	
	<element name="if">
		<attribute ref="test" />
		
		&template-content;
		
	</element>

	<element name="choose">
		<element ref="when" />
		<element ref="otherwise" />
	</element>

	<element name="when">
		<attribute ref="test" />
		&template-content;
	</element>

	<element name="otherwise">
		&template-content;
	</element>
	
	<!-- Misc. elements -->
	<element name="variable">
		<attribute ref="name" />
		<attribute ref="select" />
		
		&template-content;
		
	</element>
	
	<element name="param">
		<attribute ref="name" />
		<attribute name="select" />
		
		&template-content;
		
	</element>
	
	<element name="attribute-set">
		<attribute ref="name" />
		<element ref="attribute" />
	</element>
	
	<element name="sort">
		<description>
			<p>
				If present, this <strong>must</strong> be the first element inside a <ref>for-each</ref> or an
				<ref>apply-templates</ref> instruction.
			</p>
			<p>
				Note that multiple sort elements are allowed.
			</p>
		</description>
		<attribute ref="select" />
		<attribute name="data-type" content="enum" values="text|number" />
		<attribute name="order" content="enum" values="ascending|descending" />
		<attribute name="case-order" content="enum" values="upper-first|lower-first" />
		<attribute name="lang" content="string" />
	</element>
	
	<element name="key">
		<description>
			<p>
				Creates a named index of elements matching the expression in the <var>match</var> attribute.
				The value retrieved from the <var>use</var> attribute is stored as the index value.
			</p>
		</description>
		<attribute ref="match" />
		<attribute ref="name" />
		<attribute name="use" content="expression" />
	</element>
	
	<element name="include">
		<attribute name="href" content="URI" />
	</element>
		
	<element name="import">
		<attribute name="href" content="URI" />
	</element>
	
	<element name="output">
		<attribute name="method" content="enum" values="html|xml|text" />
		<attribute name="indent" content="boolean" />
		<attribute name="omit-xml-declaration" content="boolean" />
		<attribute name="doctype-public" content="string" />
		<attribute name="doctype-system" content="string" />
		<attribute name="cdata-section-elements" content="string" />
	</element>
	
</docset>
